schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AuthPayload {
  user: User
  session: Session
  isLoggedIn: Boolean!
  userErrors: [UserError!]
}

type AuthorizeDirective {
  policy: String
  roles: [String!]
  apply: ApplyPolicy!
}

type Classroom implements Node {
  id: ID!
  users: [User]
  discussions: [Discussion]
  guid: Uuid!
  name: String!
  createdById: Int!
  createdBy: User!
  stateId: Int!
  state: State!
  deletedAt: DateTime
  delLogId: Int
  delLog: DelLog
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateClassroomPayload {
  classroom: Classroom
  userErrors: [UserError!]
}

type DelLog {
  id: Int!
  deletedForId: Int!
  deletedFor: DelLogType!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedClassrooms: [Classroom!]!
  deletedDiscussions: [Discussion!]!
  deletedMessages: [Message!]!
}

type DelLogType {
  id: Int!
  type: String!
  delLogs: [DelLog!]!
}

type Discussion implements Node {
  id: ID!
  createdBy: User!
  classroom: Classroom!
  messages(first: Int after: String last: Int before: String order: [MessageSortInput!]): MessageConnection
  guid: Uuid!
  name: String!
  classroomId: Int!
  createdById: Int!
  stateId: Int!
  state: State!
  deletedAt: DateTime
  delLogId: Int
  delLog: DelLog
  createdAt: DateTime!
  updatedAt: DateTime!
}

"A connection to a list of items."
type DiscussionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DiscussionEdge!]
  "A flattened list of the nodes."
  nodes: [Discussion!]
}

"An edge in a connection."
type DiscussionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Discussion!
}

type DiscussionMessageSubscriptionPayload {
  discussion: Discussion!
  message: Message!
  discussionId: ID!
  messageId: ID!
}

type Message implements Node {
  id: ID!
  createdBy: User!
  body: String!
  discussionId: Int!
  discussion: Discussion!
  createdById: Int!
  deletedAt: DateTime
  delLogId: Int
  delLog: DelLog
  createdAt: DateTime!
  updatedAt: DateTime!
}

"A connection to a list of items."
type MessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MessageEdge!]
  "A flattened list of the nodes."
  nodes: [Message!]
}

"An edge in a connection."
type MessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Message!
}

type Mutation {
  createClassroom(input: CreateClassroomInput!): CreateClassroomPayload!
  sendDiscussionMessage(input: SendDiscussionMessageInput!): SendDiscussionMessagePayload!
  signUp(input: SignUpInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  logout(input: LogoutInput!): AuthPayload!
  refreshSession(input: RefreshSessionInput!): AuthPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  users: [User!]!
  userById(id: ID!): User!
  sessions: [Session!]!
  sessionById(id: ID!): Session!
  classrooms: [Classroom!]!
  classroomById(id: ID!): Classroom!
  classroomsById(ids: [ID!]!): [Classroom!]!
  classroomsByUser: [Classroom!]!
  discussions(first: Int after: String last: Int before: String): DiscussionConnection
  discussionById(id: ID!): Discussion!
  discussionsById(ids: [ID!]!): [Discussion!]!
  me: User
}

type SendDiscussionMessagePayload {
  message: Message
  userErrors: [UserError!]
}

type Session implements Node {
  id: ID!
  user: User
  createdAt: DateTime!
  expiresAt: DateTime!
  updatedAt: DateTime!
  userId: Int!
}

type State {
  id: Int!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  classrooms: [Classroom!]!
  discussions: [Discussion!]!
}

type Subscription {
  onDiscussionMessageReceived(discussionId: ID!): DiscussionMessageSubscriptionPayload!
}

type User implements Node {
  id: ID!
  classrooms: [Classroom]
  sessions: [Session]
  guid: Uuid!
  name: String!
  email: String!
  stateId: Int!
  state: State!
  createdAt: DateTime!
  updatedAt: DateTime!
  messages: [Message!]!
  userName: String
  normalizedUserName: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type UserError {
  message: String!
  code: String!
}

input ClassroomSortInput {
  id: SortEnumType
  guid: SortEnumType
  name: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  stateId: SortEnumType
  state: StateSortInput
  deletedAt: SortEnumType
  delLogId: SortEnumType
  delLog: DelLogSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input CreateClassroomInput {
  name: String!
}

input DelLogSortInput {
  id: SortEnumType
  deletedForId: SortEnumType
  deletedFor: DelLogTypeSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input DelLogTypeSortInput {
  id: SortEnumType
  type: SortEnumType
}

input DiscussionSortInput {
  id: SortEnumType
  guid: SortEnumType
  name: SortEnumType
  classroomId: SortEnumType
  classroom: ClassroomSortInput
  createdById: SortEnumType
  createdBy: UserSortInput
  stateId: SortEnumType
  state: StateSortInput
  deletedAt: SortEnumType
  delLogId: SortEnumType
  delLog: DelLogSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input LoginInput {
  email: String!
  password: String!
}

input LogoutInput {
  sessionId: ID!
}

input MessageSortInput {
  id: SortEnumType
  body: SortEnumType
  discussionId: SortEnumType
  discussion: DiscussionSortInput
  createdById: SortEnumType
  createdBy: UserSortInput
  deletedAt: SortEnumType
  delLogId: SortEnumType
  delLog: DelLogSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input RefreshSessionInput {
  sessionId: ID!
}

input SendDiscussionMessageInput {
  discussionId: ID!
  body: String!
}

input SignUpInput {
  name: String!
  email: String!
  password: String!
}

input StateSortInput {
  id: SortEnumType
  status: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input UserSortInput {
  guid: SortEnumType
  name: SortEnumType
  email: SortEnumType
  stateId: SortEnumType
  state: StateSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  id: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar Uuid