schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AuthPayload {
  user: User
  session: Session
  isLoggedIn: Boolean!
  userErrors: [UserError!]
}

type AuthorizeDirective {
  policy: String
  roles: [String!]
  apply: ApplyPolicy!
}

type Classroom implements Node {
  id: ID!
  users: [User]
  guid: Uuid!
  name: String!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
}

type CreateClassroomPayload {
  classroom: Classroom
  userErrors: [UserError!]
}

type Mutation {
  createClassroom(input: CreateClassroomInput!): CreateClassroomPayload!
  signUp(input: SignUpInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  logout(input: LogoutInput!): AuthPayload!
  refreshSession: AuthPayload!
}

type Query {
  node(id: ID!): Node
  users: [User!]!
  userById(id: ID!): User!
  sessions: [Session!]!
  sessionById(id: ID!): Session!
  classrooms: [Classroom!]!
  classroomById(id: ID!): Classroom!
  classroomsById(ids: [ID!]!): [Classroom!]!
  me: User
}

type Session implements Node {
  id: ID!
  user: User
  createdAt: DateTime!
  expiresAt: DateTime!
  updatedAt: DateTime!
  userId: Int!
}

type User implements Node {
  id: ID!
  classrooms: [Classroom]
  sessions: [Session]
  guid: Uuid!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userName: String
  normalizedUserName: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type UserError {
  message: String!
  code: String!
}

input CreateClassroomInput {
  name: String!
}

input LoginInput {
  email: String!
  password: String!
}

input LogoutInput {
  sessionId: ID!
}

input SignUpInput {
  name: String!
  email: String!
  password: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar Uuid