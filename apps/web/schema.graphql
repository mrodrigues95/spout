"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """Streamed when true."""
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is
  executed after the policy has determined that the current user is allowed to
  access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

"""A connection to a list of items."""
type AnnouncementsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnouncementsEdge!]

  """A flattened list of the nodes."""
  nodes: [ClassroomAnnouncement!]
  totalCount: Int!
}

"""An edge in a connection."""
type AnnouncementsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ClassroomAnnouncement!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type AuthPayload {
  user: User
  session: Session
  isLoggedIn: Boolean!
  requiresTwoFactorLogin: Boolean!
}

type BlobDeletionError implements Error {
  message: String!
}

type BlobNotFoundError implements Error {
  message: String!
}

type BlobPropertiesError implements Error {
  message: String!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

union ChangeEmailError = UserNotFoundError | InvalidTokenError | SessionExpiredError

input ChangeEmailInput {
  sessionId: ID!
  token: String!
}

type ChangeEmailPayload {
  authPayload: AuthPayload
  errors: [ChangeEmailError!]
  query: Query!
}

union ChangePasswordError = UserNotFoundError | IncorrectCurrentPasswordError | SessionExpiredError

input ChangePasswordInput {
  sessionId: ID!
  currentPassword: String!
  newPassword: String!
}

type ChangePasswordPayload {
  authPayload: AuthPayload
  errors: [ChangePasswordError!]
  query: Query!
}

union ChangePhoneNumberError = UserNotFoundError | SessionExpiredError | InvalidTokenError

input ChangePhoneNumberInput {
  sessionId: ID!
  token: String!
}

type ChangePhoneNumberPayload {
  authPayload: AuthPayload
  errors: [ChangePhoneNumberError!]
  query: Query!
}

type Classroom implements Node {
  id: ID!
  guid: UUID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  syllabus: ClassroomSyllabus
  invites: [ClassroomInvite!]!
  announcements(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ClassroomAnnouncementFilterInput
    order: [ClassroomAnnouncementSortInput!]
  ): AnnouncementsConnection
  reminders(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ClassroomReminderFilterInput
    order: [ClassroomReminderSortInput!]
  ): RemindersConnection
  users(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: UserFilterInput
    order: [UserSortInput!]
  ): UsersConnection
  discussions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: DiscussionFilterInput
    order: [DiscussionSortInput!]
  ): DiscussionsConnection
  state: State
  delLogId: Int
  delLog: DelLog
  deletedAt: DateTime
}

type ClassroomAnnouncement implements Node {
  id: ID!
  guid: UUID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  classroom: Classroom!
}

input ClassroomAnnouncementFilterInput {
  and: [ClassroomAnnouncementFilterInput!]
  or: [ClassroomAnnouncementFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  content: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

type ClassroomAnnouncementNotFoundError implements Error {
  message: String!
}

input ClassroomAnnouncementSortInput {
  id: SortEnumType
  guid: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  classroomId: SortEnumType
  classroom: ClassroomSortInput
  content: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ClassroomFilterInput {
  and: [ClassroomFilterInput!]
  or: [ClassroomFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  syllabusId: ComparableNullableOfInt32OperationFilterInput
  syllabus: ClassroomSyllabusFilterInput
  stateId: ComparableInt32OperationFilterInput
  state: StateFilterInput
  delLogId: ComparableNullableOfInt32OperationFilterInput
  delLog: DelLogFilterInput
  deletedAt: ComparableNullableOfDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  discussions: ListFilterInputTypeOfDiscussionFilterInput
  users: ListFilterInputTypeOfClassroomUserFilterInput
  invites: ListFilterInputTypeOfClassroomInviteFilterInput
  announcements: ListFilterInputTypeOfClassroomAnnouncementFilterInput
  reminders: ListFilterInputTypeOfClassroomReminderFilterInput
}

type ClassroomInvite implements Node {
  id: ID!
  guid: UUID!
  code: String!
  totalUses: Short!
  maxUses: Short
  maxAge: Int
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  classroom: Classroom!
}

type ClassroomInviteExpiredError implements Error {
  message: String!
}

input ClassroomInviteFilterInput {
  and: [ClassroomInviteFilterInput!]
  or: [ClassroomInviteFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  totalUses: ComparableInt16OperationFilterInput
  code: StringOperationFilterInput
  maxUses: ComparableNullableOfInt16OperationFilterInput
  maxAge: ComparableNullableOfInt32OperationFilterInput
  expiresAt: ComparableNullableOfDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  logs: ListFilterInputTypeOfClassroomInviteLogFilterInput
}

type ClassroomInviteLog {
  id: Int!
  guid: UUID!
  classroomInviteId: Int!
  classroomInvite: ClassroomInvite
  usedById: Int!
  usedBy: User
  usedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClassroomInviteLogFilterInput {
  and: [ClassroomInviteLogFilterInput!]
  or: [ClassroomInviteLogFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  classroomInviteId: ComparableInt32OperationFilterInput
  classroomInvite: ClassroomInviteFilterInput
  usedById: ComparableInt32OperationFilterInput
  usedBy: UserFilterInput
  usedAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

type ClassroomNotFoundError implements Error {
  message: String!
}

type ClassroomReminder implements Node {
  id: ID!
  guid: UUID!
  title: String!
  description: String
  dueAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  classroom: Classroom!
  importance: ClassroomReminderImportance!
}

input ClassroomReminderFilterInput {
  and: [ClassroomReminderFilterInput!]
  or: [ClassroomReminderFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  importance: ClassroomReminderImportanceOperationFilterInput
  dueAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

enum ClassroomReminderImportance {
  LOW
  MEDIUM
  HIGH
}

input ClassroomReminderImportanceOperationFilterInput {
  eq: ClassroomReminderImportance
  neq: ClassroomReminderImportance
  in: [ClassroomReminderImportance!]
  nin: [ClassroomReminderImportance!]
}

input ClassroomReminderSortInput {
  id: SortEnumType
  guid: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  classroomId: SortEnumType
  classroom: ClassroomSortInput
  title: SortEnumType
  description: SortEnumType
  importance: SortEnumType
  dueAt: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ClassroomSortInput {
  id: SortEnumType
  guid: SortEnumType
  name: SortEnumType
  syllabusId: SortEnumType
  syllabus: ClassroomSyllabusSortInput
  stateId: SortEnumType
  state: StateSortInput
  delLogId: SortEnumType
  delLog: DelLogSortInput
  deletedAt: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

type ClassroomSyllabus {
  id: Int!
  guid: UUID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  classroom: Classroom
}

input ClassroomSyllabusFilterInput {
  and: [ClassroomSyllabusFilterInput!]
  or: [ClassroomSyllabusFilterInput!]
  id: ComparableInt32OperationFilterInput
  guid: ComparableGuidOperationFilterInput
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  content: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input ClassroomSyllabusSortInput {
  id: SortEnumType
  guid: SortEnumType
  classroomId: SortEnumType
  classroom: ClassroomSortInput
  content: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ClassroomUserFilterInput {
  and: [ClassroomUserFilterInput!]
  or: [ClassroomUserFilterInput!]
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  isCreator: BooleanOperationFilterInput
  joinedAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ComparableInt16OperationFilterInput {
  eq: Short
  neq: Short
  in: [Short!]
  nin: [Short!]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfInt16OperationFilterInput {
  eq: Short
  neq: Short
  in: [Short]
  nin: [Short]
  gt: Short
  ngt: Short
  gte: Short
  ngte: Short
  lt: Short
  nlt: Short
  lte: Short
  nlte: Short
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

union CompleteUploadError = BlobNotFoundError | BlobPropertiesError | FileNotFoundError

input CompleteUploadInput {
  fileId: ID!
}

type CompleteUploadPayload {
  file: File
  errors: [CompleteUploadError!]
  query: Query!
}

union CreateClassroomAnnouncementError = ClassroomNotFoundError

input CreateClassroomAnnouncementInput {
  classroomId: ID!
  content: String!
}

type CreateClassroomAnnouncementPayload {
  classroomAnnouncement: ClassroomAnnouncement
  errors: [CreateClassroomAnnouncementError!]
  query: Query!
}

input CreateClassroomInput {
  name: String!
}

union CreateClassroomInviteError = ClassroomNotFoundError

input CreateClassroomInviteInput {
  classroomId: ID!
  maxAge: Int
  maxUses: Short
}

type CreateClassroomInvitePayload {
  classroomInvite: ClassroomInvite
  errors: [CreateClassroomInviteError!]
  query: Query!
}

type CreateClassroomPayload {
  classroom: Classroom
  query: Query!
}

union CreateClassroomReminderError = ClassroomNotFoundError

input CreateClassroomReminderInput {
  classroomId: ID!
  title: String!
  description: String
  dueAt: DateTime!
  importance: ClassroomReminderImportance!
}

type CreateClassroomReminderPayload {
  classroomReminder: ClassroomReminder
  errors: [CreateClassroomReminderError!]
  query: Query!
}

union CreateDiscussionError = ClassroomNotFoundError

input CreateDiscussionInput {
  classroomId: ID!
  name: String!
}

type CreateDiscussionPayload {
  discussion: Discussion
  errors: [CreateDiscussionError!]
  query: Query!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

union DeleteClassroomAnnouncementError = ClassroomAnnouncementNotFoundError

input DeleteClassroomAnnouncementInput {
  classroomAnnouncementId: ID!
}

type DeleteClassroomAnnouncementPayload {
  classroomAnnouncement: ClassroomAnnouncement
  errors: [DeleteClassroomAnnouncementError!]
  query: Query!
}

union DeleteFileError = FileNotFoundError | BlobNotFoundError | BlobDeletionError

input DeleteFileInput {
  fileId: ID!
}

type DeleteFilePayload {
  file: File
  errors: [DeleteFileError!]
  query: Query!
}

type DelLog {
  id: Int!
  deletedForId: Int!
  deletedFor: DelLogType
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedClassrooms: [Classroom!]!
  deletedDiscussions: [Discussion!]!
  deletedMessages: [Message!]!
}

input DelLogFilterInput {
  and: [DelLogFilterInput!]
  or: [DelLogFilterInput!]
  id: ComparableInt32OperationFilterInput
  deletedForId: ComparableInt32OperationFilterInput
  deletedFor: DelLogTypeFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  deletedClassrooms: ListFilterInputTypeOfClassroomFilterInput
  deletedDiscussions: ListFilterInputTypeOfDiscussionFilterInput
  deletedMessages: ListFilterInputTypeOfMessageFilterInput
}

input DelLogSortInput {
  id: SortEnumType
  deletedForId: SortEnumType
  deletedFor: DelLogTypeSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

type DelLogType {
  id: Int!
  type: String!
  delLogs: [DelLog!]!
}

input DelLogTypeFilterInput {
  and: [DelLogTypeFilterInput!]
  or: [DelLogTypeFilterInput!]
  id: ComparableInt32OperationFilterInput
  type: StringOperationFilterInput
  delLogs: ListFilterInputTypeOfDelLogFilterInput
}

input DelLogTypeSortInput {
  id: SortEnumType
  type: SortEnumType
}

union DisableTwoFactorError = UserNotFoundError | SessionExpiredError | IncorrectCurrentPasswordError

input DisableTwoFactorInput {
  sessionId: ID!
  currentPassword: String!
}

type DisableTwoFactorPayload {
  authPayload: AuthPayload
  errors: [DisableTwoFactorError!]
  query: Query!
}

type Discussion implements Node {
  id: ID!
  guid: UUID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  classroom: Classroom!
  messages(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: MessageFilterInput
    order: [MessageSortInput!]
  ): MessagesConnection
  topic: String
  description: String
  state: State
  deletedAt: DateTime
  delLogId: Int
  delLog: DelLog
}

input DiscussionFilterInput {
  and: [DiscussionFilterInput!]
  or: [DiscussionFilterInput!]
  id: IdOperationFilterInput
  guid: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  topic: StringOperationFilterInput
  description: StringOperationFilterInput
  classroomId: ComparableInt32OperationFilterInput
  classroom: ClassroomFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  stateId: ComparableInt32OperationFilterInput
  state: StateFilterInput
  deletedAt: ComparableNullableOfDateTimeOperationFilterInput
  delLogId: ComparableNullableOfInt32OperationFilterInput
  delLog: DelLogFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
}

type DiscussionMessageAlreadyNotPinnedError implements Error {
  message: String!
}

type DiscussionMessageAlreadyPinnedError implements Error {
  message: String!
}

type DiscussionMessageNotFoundError implements Error {
  message: String!
}

type DiscussionMessageSubscriptionPayload {
  discussion: Discussion!
  message: Message!
  discussionId: ID!
  messageId: ID!
}

type DiscussionNotFoundError implements Error {
  message: String!
}

"""A connection to a list of items."""
type DiscussionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiscussionsEdge!]

  """A flattened list of the nodes."""
  nodes: [Discussion!]
  totalCount: Int!
}

"""An edge in a connection."""
type DiscussionsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Discussion!
}

input DiscussionSortInput {
  id: SortEnumType
  guid: SortEnumType
  name: SortEnumType
  topic: SortEnumType
  description: SortEnumType
  classroomId: SortEnumType
  classroom: ClassroomSortInput
  createdById: SortEnumType
  createdBy: UserSortInput
  stateId: SortEnumType
  state: StateSortInput
  deletedAt: SortEnumType
  delLogId: SortEnumType
  delLog: DelLogSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

type EmailAlreadyRegisteredError implements Error {
  message: String!
}

type EmailAlreadyVerifiedError implements Error {
  message: String!
}

type EmailNotVerifiedError implements Error {
  message: String!
}

union EnableTwoFactorError = UserNotFoundError | SessionExpiredError | UnverifiedUserError | InvalidProviderError

input EnableTwoFactorInput {
  sessionId: ID!
  provider: UserPreferredProvider!
}

type EnableTwoFactorPayload {
  authPayload: AuthPayload
  errors: [EnableTwoFactorError!]
  query: Query!
}

interface Error {
  message: String!
}

type File implements Node {
  id: ID!
  uploadedBy: User!
  contentLength: Long!
  extension: WhitelistedFileExtension!
  uploadStatus: FileUploadStatus!
  sas: URL!
  signatureEncoded: String!
  signatureDecoded: String!
  containerName: String!
  blobName: String!
  name: String!
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  mimeType: String
  location: URL
  eTag: String
  mD5: String
  deletedAt: DateTime
  messageFiles: [MessageFile!]!
}

input FileFilterInput {
  and: [FileFilterInput!]
  or: [FileFilterInput!]
  id: ComparableInt32OperationFilterInput
  uploadedById: ComparableInt32OperationFilterInput
  uploadedBy: UserFilterInput
  contentLength: ComparableInt64OperationFilterInput
  mimeType: StringOperationFilterInput
  fileExtension: WhitelistedFileExtensionOperationFilterInput
  uploadStatus: FileUploadStatusOperationFilterInput
  sas: UriFilterInput
  signatureEncoded: StringOperationFilterInput
  signatureDecoded: StringOperationFilterInput
  containerName: StringOperationFilterInput
  blobName: StringOperationFilterInput
  name: StringOperationFilterInput
  location: UriFilterInput
  eTag: StringOperationFilterInput
  mD5: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  deletedAt: ComparableNullableOfDateTimeOperationFilterInput
  messageFiles: ListFilterInputTypeOfMessageFileFilterInput
}

type FileNotFoundError implements Error {
  message: String!
}

"""A connection to a list of items."""
type FilesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FilesEdge!]

  """A flattened list of the nodes."""
  nodes: [File!]
  totalCount: Int!
}

"""An edge in a connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: File!
}

input FileSortInput {
  id: SortEnumType
  uploadedById: SortEnumType
  uploadedBy: UserSortInput
  contentLength: SortEnumType
  mimeType: SortEnumType
  fileExtension: SortEnumType
  uploadStatus: SortEnumType
  sas: UriSortInput
  signatureEncoded: SortEnumType
  signatureDecoded: SortEnumType
  containerName: SortEnumType
  blobName: SortEnumType
  name: SortEnumType
  location: UriSortInput
  eTag: SortEnumType
  mD5: SortEnumType
  isDeleted: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  deletedAt: SortEnumType
}

enum FileUploadStatus {
  QUEUED
  COMPLETED
  ERROR
  IGNORED
}

input FileUploadStatusOperationFilterInput {
  eq: FileUploadStatus
  neq: FileUploadStatus
  in: [FileUploadStatus!]
  nin: [FileUploadStatus!]
}

union GenerateChangeEmailTokenError = UserNotFoundError | IncorrectCurrentPasswordError | EmailAlreadyRegisteredError | EmailNotVerifiedError

input GenerateChangeEmailTokenInput {
  newEmail: String!
  password: String!
}

type GenerateChangeEmailTokenPayload {
  authPayload: AuthPayload
  errors: [GenerateChangeEmailTokenError!]
  query: Query!
}

union GenerateChangePhoneNumberTokenError = UserNotFoundError | InvalidPhoneNumberError | SMSNotSentError

input GenerateChangePhoneNumberTokenInput {
  phoneNumber: String!
  countryCode: String!
}

type GenerateChangePhoneNumberTokenPayload {
  authPayload: AuthPayload
  errors: [GenerateChangePhoneNumberTokenError!]
  query: Query!
}

union GenerateDownloadSASError = FileNotFoundError | GenerateSignatureError

input GenerateDownloadSASInput {
  fileId: ID!
}

type GenerateDownloadSASPayload {
  generateSASPayload: GenerateSASPayload
  errors: [GenerateDownloadSASError!]
  query: Query!
}

union GenerateEmailVerificationTokenError = UserNotFoundError | EmailAlreadyVerifiedError

type GenerateEmailVerificationTokenPayload {
  authPayload: AuthPayload
  errors: [GenerateEmailVerificationTokenError!]
  query: Query!
}

input GeneratePasswordResetTokenInput {
  email: String!
}

type GeneratePasswordResetTokenPayload {
  authPayload: AuthPayload
  query: Query!
}

type GenerateSASPayload {
  file: File!
  sas: URL!
}

type GenerateSignatureError implements Error {
  message: String!
}

union GenerateTwoFactorTokenError = LoginUserError

type GenerateTwoFactorTokenPayload {
  authPayload: AuthPayload
  errors: [GenerateTwoFactorTokenError!]
  query: Query!
}

union GenerateUploadSASError = GenerateSignatureError | ParseSignatureError

input GenerateUploadSASInput {
  fileName: String!
  size: Long!
  mimeType: String
  fileExtension: WhitelistedFileExtension!
}

type GenerateUploadSASPayload {
  generateSASPayload: GenerateSASPayload
  errors: [GenerateUploadSASError!]
  query: Query!
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

type IncorrectCurrentPasswordError implements Error {
  message: String!
}

type InvalidPhoneNumberError implements Error {
  message: String!
}

type InvalidProviderError implements Error {
  message: String!
}

type InvalidTokenError implements Error {
  message: String!
}

union JoinClassroomError = ClassroomNotFoundError | ClassroomInviteExpiredError

input JoinClassroomInput {
  code: String!
}

type JoinClassroomPayload {
  classroom: Classroom
  errors: [JoinClassroomError!]
  query: Query!
}

input ListFilterInputTypeOfClassroomAnnouncementFilterInput {
  all: ClassroomAnnouncementFilterInput
  none: ClassroomAnnouncementFilterInput
  some: ClassroomAnnouncementFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassroomFilterInput {
  all: ClassroomFilterInput
  none: ClassroomFilterInput
  some: ClassroomFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassroomInviteFilterInput {
  all: ClassroomInviteFilterInput
  none: ClassroomInviteFilterInput
  some: ClassroomInviteFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassroomInviteLogFilterInput {
  all: ClassroomInviteLogFilterInput
  none: ClassroomInviteLogFilterInput
  some: ClassroomInviteLogFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassroomReminderFilterInput {
  all: ClassroomReminderFilterInput
  none: ClassroomReminderFilterInput
  some: ClassroomReminderFilterInput
  any: Boolean
}

input ListFilterInputTypeOfClassroomUserFilterInput {
  all: ClassroomUserFilterInput
  none: ClassroomUserFilterInput
  some: ClassroomUserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDelLogFilterInput {
  all: DelLogFilterInput
  none: DelLogFilterInput
  some: DelLogFilterInput
  any: Boolean
}

input ListFilterInputTypeOfDiscussionFilterInput {
  all: DiscussionFilterInput
  none: DiscussionFilterInput
  some: DiscussionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFileFilterInput {
  all: FileFilterInput
  none: FileFilterInput
  some: FileFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMessageFileFilterInput {
  all: MessageFileFilterInput
  none: MessageFileFilterInput
  some: MessageFileFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMessageFilterInput {
  all: MessageFilterInput
  none: MessageFilterInput
  some: MessageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSessionFilterInput {
  all: SessionFilterInput
  none: SessionFilterInput
  some: SessionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserEmailChangeFilterInput {
  all: UserEmailChangeFilterInput
  none: UserEmailChangeFilterInput
  some: UserEmailChangeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserPasswordResetFilterInput {
  all: UserPasswordResetFilterInput
  none: UserPasswordResetFilterInput
  some: UserPasswordResetFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserPhoneNumberChangeFilterInput {
  all: UserPhoneNumberChangeFilterInput
  none: UserPhoneNumberChangeFilterInput
  some: UserPhoneNumberChangeFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

union LoginError = LoginUserError

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  authPayload: AuthPayload
  errors: [LoginError!]
  query: Query!
}

type LoginUserError implements Error {
  message: String!
}

input LogoutInput {
  sessionId: ID!
}

type LogoutPayload {
  authPayload: AuthPayload
  query: Query!
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric
values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message implements Node {
  id: ID!
  content: String!
  discussion: Discussion!
  isEvent: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  pinnedBy: User
  parentMessage: Message
  attachments: [File!]!
  triggeredEvents: [Message!]!
  messageEvent: MessageEvent
  delLogId: Int
  delLog: DelLog
  pinnedAt: DateTime
  deletedAt: DateTime
}

enum MessageEvent {
  CHANGE_TOPIC
  CHANGE_DESCRIPTION
  PINNED_MESSAGE
  UNPINNED_MESSAGE
}

type MessageFile {
  messageId: Int!
  message: Message
  fileId: Int!
  file: File
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageFileFilterInput {
  and: [MessageFileFilterInput!]
  or: [MessageFileFilterInput!]
  messageId: ComparableInt32OperationFilterInput
  message: MessageFilterInput
  fileId: ComparableInt32OperationFilterInput
  file: FileFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input MessageFilterInput {
  and: [MessageFilterInput!]
  or: [MessageFilterInput!]
  id: ComparableInt32OperationFilterInput
  content: StringOperationFilterInput
  discussionId: ComparableInt32OperationFilterInput
  discussion: DiscussionFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  pinnedById: ComparableNullableOfInt32OperationFilterInput
  pinnedBy: UserFilterInput
  parentMessageId: ComparableNullableOfInt32OperationFilterInput
  parentMessage: MessageFilterInput
  isEvent: BooleanOperationFilterInput
  messageEvent: NullableOfMessageEventOperationFilterInput
  delLogId: ComparableNullableOfInt32OperationFilterInput
  delLog: DelLogFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  pinnedAt: ComparableNullableOfDateTimeOperationFilterInput
  deletedAt: ComparableNullableOfDateTimeOperationFilterInput
  messageFiles: ListFilterInputTypeOfMessageFileFilterInput
  messageLinks: ListFilterInputTypeOfMessageFilterInput
}

"""A connection to a list of items."""
type MessagesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessagesEdge!]

  """A flattened list of the nodes."""
  nodes: [Message!]
  totalCount: Int!
}

"""An edge in a connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Message!
}

input MessageSortInput {
  id: SortEnumType
  content: SortEnumType
  discussionId: SortEnumType
  discussion: DiscussionSortInput
  createdById: SortEnumType
  createdBy: UserSortInput
  pinnedById: SortEnumType
  pinnedBy: UserSortInput
  parentMessageId: SortEnumType
  parentMessage: MessageSortInput
  isEvent: SortEnumType
  messageEvent: SortEnumType
  delLogId: SortEnumType
  delLog: DelLogSortInput
  createdAt: SortEnumType
  updatedAt: SortEnumType
  pinnedAt: SortEnumType
  deletedAt: SortEnumType
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload!
  updateAvatar(input: UpdateAvatarInput!): UpdateAvatarPayload!
  createClassroom(input: CreateClassroomInput!): CreateClassroomPayload!
  joinClassroom(input: JoinClassroomInput!): JoinClassroomPayload!
  createClassroomInvite(input: CreateClassroomInviteInput!): CreateClassroomInvitePayload!
  createClassroomAnnouncement(input: CreateClassroomAnnouncementInput!): CreateClassroomAnnouncementPayload!
  updateClassroomAnnouncement(input: UpdateClassroomAnnouncementInput!): UpdateClassroomAnnouncementPayload!
  deleteClassroomAnnouncement(input: DeleteClassroomAnnouncementInput!): DeleteClassroomAnnouncementPayload!
  createClassroomReminder(input: CreateClassroomReminderInput!): CreateClassroomReminderPayload!
  upsertClassroomSyllabus(input: UpsertClassroomSyllabusInput!): UpsertClassroomSyllabusPayload!
  sendDiscussionMessage(input: SendDiscussionMessageInput!): SendDiscussionMessagePayload!
  updateDiscussionMessage(input: UpdateDiscussionMessageInput!): UpdateDiscussionMessagePayload!
  pinDiscussionMessage(input: PinDiscussionMessageInput!): PinDiscussionMessagePayload!
  unpinDiscussionMessage(input: UnpinDiscussionMessageInput!): UnpinDiscussionMessagePayload!
  createDiscussion(input: CreateDiscussionInput!): CreateDiscussionPayload!
  updateDiscussionTopic(input: UpdateDiscussionTopicInput!): UpdateDiscussionTopicPayload!
  updateDiscussionDescription(input: UpdateDiscussionDescriptionInput!): UpdateDiscussionDescriptionPayload!
  signUp(input: SignUpInput!): SignUpPayload!
  login(input: LoginInput!): LoginPayload!
  generateTwoFactorToken: GenerateTwoFactorTokenPayload!
  verifyTwoFactorToken(input: VerifyTwoFactorTokenInput!): VerifyTwoFactorTokenPayload!
  logout(input: LogoutInput!): LogoutPayload!
  verifyPassword(input: VerifyPasswordInput!): VerifyPasswordPayload!
  enableTwoFactor(input: EnableTwoFactorInput!): EnableTwoFactorPayload!
  disableTwoFactor(input: DisableTwoFactorInput!): DisableTwoFactorPayload!
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  generateEmailVerificationToken: GenerateEmailVerificationTokenPayload!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailPayload!
  generateChangeEmailToken(input: GenerateChangeEmailTokenInput!): GenerateChangeEmailTokenPayload!
  changeEmail(input: ChangeEmailInput!): ChangeEmailPayload!
  generatePasswordResetToken(input: GeneratePasswordResetTokenInput!): GeneratePasswordResetTokenPayload!
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload!
  generateChangePhoneNumberToken(input: GenerateChangePhoneNumberTokenInput!): GenerateChangePhoneNumberTokenPayload!
  changePhoneNumber(input: ChangePhoneNumberInput!): ChangePhoneNumberPayload!
  removePhoneNumber(input: RemovePhoneNumberInput!): RemovePhoneNumberPayload!
  refreshSession(input: RefreshSessionInput!): RefreshSessionPayload!
  generateUploadSAS(input: GenerateUploadSASInput!): GenerateUploadSASPayload!
  generateDownloadSAS(input: GenerateDownloadSASInput!): GenerateDownloadSASPayload!
  completeUpload(input: CompleteUploadInput!): CompleteUploadPayload!
  deleteFile(input: DeleteFileInput!): DeleteFilePayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

input NullableOfMessageEventOperationFilterInput {
  eq: MessageEvent
  neq: MessageEvent
  in: [MessageEvent]
  nin: [MessageEvent]
}

input NullableOfUserPreferredProviderOperationFilterInput {
  eq: UserPreferredProvider
  neq: UserPreferredProvider
  in: [UserPreferredProvider]
  nin: [UserPreferredProvider]
}

"""Information about pagination in a connection."""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ParseSignatureError implements Error {
  message: String!
}

union PinDiscussionMessageError = DiscussionMessageNotFoundError | DiscussionMessageAlreadyPinnedError

input PinDiscussionMessageInput {
  messageId: ID!
}

type PinDiscussionMessagePayload {
  message: Message
  errors: [PinDiscussionMessageError!]
  query: Query!
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  me: User
  users: [User!]!
  userById(id: ID!): User!
  sessions(where: SessionFilterInput): [Session!]!
  sessionById(id: ID!): Session!
  classrooms: [Classroom!]!
  classroomById(id: ID!): Classroom!
  classroomsById(ids: [ID!]!): [Classroom!]!
  discussions: [Discussion!]!
  discussionById(id: ID!): Discussion!
  discussionsById(ids: [ID!]!): [Discussion!]!
  files(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: FileFilterInput
    order: [FileSortInput!]
  ): FilesConnection
}

union RefreshSessionError = SessionNotFoundError

input RefreshSessionInput {
  sessionId: ID!
}

type RefreshSessionPayload {
  authPayload: AuthPayload
  errors: [RefreshSessionError!]
  query: Query!
}

"""A connection to a list of items."""
type RemindersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RemindersEdge!]

  """A flattened list of the nodes."""
  nodes: [ClassroomReminder!]
  totalCount: Int!
}

"""An edge in a connection."""
type RemindersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ClassroomReminder!
}

union RemovePhoneNumberError = UserNotFoundError | SessionExpiredError

input RemovePhoneNumberInput {
  sessionId: ID!
}

type RemovePhoneNumberPayload {
  authPayload: AuthPayload
  errors: [RemovePhoneNumberError!]
  query: Query!
}

union ResetPasswordError = InvalidTokenError

input ResetPasswordInput {
  token: String!
  newPassword: String!
  confirmNewPassword: String!
}

type ResetPasswordPayload {
  authPayload: AuthPayload
  errors: [ResetPasswordError!]
  query: Query!
}

union SendDiscussionMessageError = DiscussionNotFoundError

input SendDiscussionMessageInput {
  discussionId: ID!
  fileIds: [ID!]!
  content: String!
}

type SendDiscussionMessagePayload {
  message: Message
  errors: [SendDiscussionMessageError!]
  query: Query!
}

type Session implements Node {
  id: ID!
  guid: UUID!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
  expiresAt: DateTime!
}

type SessionExpiredError implements Error {
  message: String!
}

input SessionFilterInput {
  and: [SessionFilterInput!]
  or: [SessionFilterInput!]
  id: IdOperationFilterInput
  guid: ComparableGuidOperationFilterInput
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  expiresAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

type SessionNotFoundError implements Error {
  message: String!
}

"""
The `Short` scalar type represents non-fractional signed whole 16-bit numeric
values. Short can represent values between -(2^15) and 2^15 - 1.
"""
scalar Short

union SignUpError = SignUpNewUserError

input SignUpInput {
  name: String!
  email: String!
  password: String!
}

type SignUpNewUserError implements Error {
  message: String!
}

type SignUpPayload {
  authPayload: AuthPayload
  errors: [SignUpError!]
  query: Query!
}

type SMSNotSentError implements Error {
  message: String!
}

enum SortEnumType {
  ASC
  DESC
}

type State {
  id: Int!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  classrooms: [Classroom!]!
  discussions: [Discussion!]!
}

input StateFilterInput {
  and: [StateFilterInput!]
  or: [StateFilterInput!]
  id: ComparableInt32OperationFilterInput
  status: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  users: ListFilterInputTypeOfUserFilterInput
  classrooms: ListFilterInputTypeOfClassroomFilterInput
  discussions: ListFilterInputTypeOfDiscussionFilterInput
}

input StateSortInput {
  id: SortEnumType
  status: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Subscription {
  onDiscussionMessageReceived(discussionId: ID!): DiscussionMessageSubscriptionPayload!
}

union UnpinDiscussionMessageError = DiscussionMessageNotFoundError | DiscussionMessageAlreadyNotPinnedError

input UnpinDiscussionMessageInput {
  messageId: ID!
}

type UnpinDiscussionMessagePayload {
  message: Message
  errors: [UnpinDiscussionMessageError!]
  query: Query!
}

type UnverifiedUserError implements Error {
  message: String!
}

input UpdateAvatarInput {
  avatarUrl: String
}

type UpdateAvatarPayload {
  user: User
  query: Query!
}

union UpdateClassroomAnnouncementError = ClassroomAnnouncementNotFoundError

input UpdateClassroomAnnouncementInput {
  classroomAnnouncementId: ID!
  content: String!
}

type UpdateClassroomAnnouncementPayload {
  classroomAnnouncement: ClassroomAnnouncement
  errors: [UpdateClassroomAnnouncementError!]
  query: Query!
}

union UpdateDiscussionDescriptionError = DiscussionNotFoundError

input UpdateDiscussionDescriptionInput {
  discussionId: ID!
  description: String
}

type UpdateDiscussionDescriptionPayload {
  discussion: Discussion
  errors: [UpdateDiscussionDescriptionError!]
  query: Query!
}

union UpdateDiscussionMessageError = DiscussionMessageNotFoundError

input UpdateDiscussionMessageInput {
  messageId: ID!
  content: String!
}

type UpdateDiscussionMessagePayload {
  message: Message
  errors: [UpdateDiscussionMessageError!]
  query: Query!
}

union UpdateDiscussionTopicError = DiscussionNotFoundError

input UpdateDiscussionTopicInput {
  discussionId: ID!
  topic: String
}

type UpdateDiscussionTopicPayload {
  discussion: Discussion
  errors: [UpdateDiscussionTopicError!]
  query: Query!
}

input UpdateProfileInput {
  name: String!
  bio: String
}

type UpdateProfilePayload {
  user: User
  query: Query!
}

union UpsertClassroomSyllabusError = ClassroomNotFoundError

input UpsertClassroomSyllabusInput {
  classroomId: ID!
  content: String
}

type UpsertClassroomSyllabusPayload {
  classroom: Classroom
  errors: [UpsertClassroomSyllabusError!]
  query: Query!
}

input UriFilterInput {
  and: [UriFilterInput!]
  or: [UriFilterInput!]
  absolutePath: StringOperationFilterInput
  absoluteUri: StringOperationFilterInput
  localPath: StringOperationFilterInput
  authority: StringOperationFilterInput
  hostNameType: UriHostNameTypeOperationFilterInput
  isDefaultPort: BooleanOperationFilterInput
  isFile: BooleanOperationFilterInput
  isLoopback: BooleanOperationFilterInput
  pathAndQuery: StringOperationFilterInput
  segments: ListStringOperationFilterInput
  isUnc: BooleanOperationFilterInput
  host: StringOperationFilterInput
  port: ComparableInt32OperationFilterInput
  query: StringOperationFilterInput
  fragment: StringOperationFilterInput
  scheme: StringOperationFilterInput
  originalString: StringOperationFilterInput
  dnsSafeHost: StringOperationFilterInput
  idnHost: StringOperationFilterInput
  isAbsoluteUri: BooleanOperationFilterInput
  userEscaped: BooleanOperationFilterInput
  userInfo: StringOperationFilterInput
}

enum UriHostNameType {
  UNKNOWN
  BASIC
  DNS
  I_PV4
  I_PV6
}

input UriHostNameTypeOperationFilterInput {
  eq: UriHostNameType
  neq: UriHostNameType
  in: [UriHostNameType!]
  nin: [UriHostNameType!]
}

input UriSortInput {
  absolutePath: SortEnumType
  absoluteUri: SortEnumType
  localPath: SortEnumType
  authority: SortEnumType
  hostNameType: SortEnumType
  isDefaultPort: SortEnumType
  isFile: SortEnumType
  isLoopback: SortEnumType
  pathAndQuery: SortEnumType
  isUnc: SortEnumType
  host: SortEnumType
  port: SortEnumType
  query: SortEnumType
  fragment: SortEnumType
  scheme: SortEnumType
  originalString: SortEnumType
  dnsSafeHost: SortEnumType
  idnHost: SortEnumType
  isAbsoluteUri: SortEnumType
  userEscaped: SortEnumType
  userInfo: SortEnumType
}

scalar URL

type User implements Node {
  id: ID!
  guid: UUID!
  name: String!
  email: String!
  profileColor: UserProfileColor!
  preferredProvider: UserPreferredProvider
  emailConfirmed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  classrooms: [Classroom!]!
  sessions: [Session!]!
  bio: String
  avatarUrl: String
  state: State
  twoFactorEnabledAt: DateTime
  emailChanges: [UserEmailChange!]!
  passwordResets: [UserPasswordReset!]!
  phoneNumberChanges: [UserPhoneNumberChange!]!
  messages: [Message!]!
  pinnedMessages: [Message!]!
  classroomAnnouncements: [ClassroomAnnouncement!]!
  classroomReminders: [ClassroomReminder!]!
  classroomInvites: [ClassroomInvite!]!
  classroomInviteLogs: [ClassroomInviteLog!]!
  fileUploads: [File!]!
  userName: String
  normalizedUserName: String
  normalizedEmail: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type UserEmailChange {
  id: Int!
  token: String
  tokenEncoded: String
  newEmail: String
  user: User
  userId: Int
  expiresAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserEmailChangeFilterInput {
  and: [UserEmailChangeFilterInput!]
  or: [UserEmailChangeFilterInput!]
  id: ComparableInt32OperationFilterInput
  token: StringOperationFilterInput
  tokenEncoded: StringOperationFilterInput
  newEmail: StringOperationFilterInput
  user: UserFilterInput
  userId: ComparableNullableOfInt32OperationFilterInput
  expiresAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: IdOperationFilterInput
  guid: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  email: StringOperationFilterInput
  bio: StringOperationFilterInput
  profileColor: UserProfileColorOperationFilterInput
  preferredProvider: NullableOfUserPreferredProviderOperationFilterInput
  avatarUrl: StringOperationFilterInput
  stateId: ComparableInt32OperationFilterInput
  state: StateFilterInput
  twoFactorEnabledAt: ComparableNullableOfDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  emailChanges: ListFilterInputTypeOfUserEmailChangeFilterInput
  passwordResets: ListFilterInputTypeOfUserPasswordResetFilterInput
  phoneNumberChanges: ListFilterInputTypeOfUserPhoneNumberChangeFilterInput
  sessions: ListFilterInputTypeOfSessionFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
  pinnedMessages: ListFilterInputTypeOfMessageFilterInput
  classrooms: ListFilterInputTypeOfClassroomUserFilterInput
  classroomAnnouncements: ListFilterInputTypeOfClassroomAnnouncementFilterInput
  classroomReminders: ListFilterInputTypeOfClassroomReminderFilterInput
  classroomInvites: ListFilterInputTypeOfClassroomInviteFilterInput
  classroomInviteLogs: ListFilterInputTypeOfClassroomInviteLogFilterInput
  fileUploads: ListFilterInputTypeOfFileFilterInput
  userName: StringOperationFilterInput
  normalizedUserName: StringOperationFilterInput
  normalizedEmail: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  securityStamp: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnd: ComparableNullableOfDateTimeOffsetOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  accessFailedCount: ComparableInt32OperationFilterInput
}

type UserNotFoundError implements Error {
  message: String!
}

type UserPasswordReset {
  id: Int!
  user: User
  userId: Int
  token: String
  tokenEncoded: String
  expiresAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserPasswordResetFilterInput {
  and: [UserPasswordResetFilterInput!]
  or: [UserPasswordResetFilterInput!]
  id: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userId: ComparableNullableOfInt32OperationFilterInput
  token: StringOperationFilterInput
  tokenEncoded: StringOperationFilterInput
  expiresAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

type UserPhoneNumberChange {
  id: Int!
  token: String
  newPhoneNumber: String
  user: User
  userId: Int
  expiresAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserPhoneNumberChangeFilterInput {
  and: [UserPhoneNumberChangeFilterInput!]
  or: [UserPhoneNumberChangeFilterInput!]
  id: ComparableInt32OperationFilterInput
  token: StringOperationFilterInput
  newPhoneNumber: StringOperationFilterInput
  user: UserFilterInput
  userId: ComparableNullableOfInt32OperationFilterInput
  expiresAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

enum UserPreferredProvider {
  EMAIL
  PHONE
}

enum UserProfileColor {
  SKY
  PINK
  GREEN
  PURPLE
  ROSE
  GRAY
  ORANGE
}

input UserProfileColorOperationFilterInput {
  eq: UserProfileColor
  neq: UserProfileColor
  in: [UserProfileColor!]
  nin: [UserProfileColor!]
}

"""A connection to a list of items."""
type UsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersEdge!]

  """A flattened list of the nodes."""
  nodes: [User!]
  totalCount: Int!
}

"""An edge in a connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

input UserSortInput {
  guid: SortEnumType
  name: SortEnumType
  email: SortEnumType
  bio: SortEnumType
  profileColor: SortEnumType
  preferredProvider: SortEnumType
  avatarUrl: SortEnumType
  stateId: SortEnumType
  state: StateSortInput
  twoFactorEnabledAt: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  id: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

scalar UUID

union VerifyEmailError = UserNotFoundError | EmailAlreadyVerifiedError | InvalidTokenError

input VerifyEmailInput {
  token: String!
}

type VerifyEmailPayload {
  authPayload: AuthPayload
  errors: [VerifyEmailError!]
  query: Query!
}

union VerifyPasswordError = UserNotFoundError | IncorrectCurrentPasswordError

input VerifyPasswordInput {
  currentPassword: String!
}

type VerifyPasswordPayload {
  authPayload: AuthPayload
  errors: [VerifyPasswordError!]
  query: Query!
}

union VerifyTwoFactorTokenError = LoginUserError | InvalidTokenError

input VerifyTwoFactorTokenInput {
  token: String!
}

type VerifyTwoFactorTokenPayload {
  authPayload: AuthPayload
  errors: [VerifyTwoFactorTokenError!]
  query: Query!
}

enum WhitelistedFileExtension {
  AAC
  CSV
  PDF
  XLS
  XLSX
  PPT
  PPTX
  BMP
  GIF
  JPEG
  JPG
  JPE
  PNG
  TIFF
  TIF
  TXT
  TEXT
  RTF
  DOC
  DOCX
  DOT
  DOTX
  DWG
  DWF
  DXF
  MP3
  MP4
  WAV
  AVI
  MOV
  MPEG
  WMV
  ZIP
}

input WhitelistedFileExtensionOperationFilterInput {
  eq: WhitelistedFileExtension
  neq: WhitelistedFileExtension
  in: [WhitelistedFileExtension!]
  nin: [WhitelistedFileExtension!]
}

