// <auto-generated />
using System;
using API.Data;
using API.Schema.Types.Files;
using API.Schema.Types.Messages;
using API.Schema.Types.Users;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220318205556_ChangeCompositeKey")]
    partial class ChangeCompositeKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "file_upload_status", new[] { "queued", "completed", "error", "ignored" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "message_event", new[] { "change_topic", "change_description", "pinned_message", "unpinned_message" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_profile_color", new[] { "sky", "pink", "green", "purple", "rose", "gray", "orange" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "whitelisted_file_extension", new[] { "aac", "csv", "pdf", "xls", "xlsx", "ppt", "pptx", "bmp", "gif", "jpeg", "jpg", "jpe", "png", "tiff", "tif", "txt", "text", "rtf", "doc", "docx", "dot", "dotx", "dwg", "dwf", "dxf", "mp3", "mp4", "wav", "avi", "mov", "mpeg", "wmv", "zip" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Data.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("DelLogId")
                        .HasColumnType("integer")
                        .HasColumnName("del_log_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_classrooms");

                    b.HasIndex("DelLogId")
                        .HasDatabaseName("ix_classrooms_del_log_id");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_classrooms_state_id");

                    b.ToTable("classrooms", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.ClassroomInvite", b =>
                {
                    b.Property<int>("InviteId")
                        .HasColumnType("integer")
                        .HasColumnName("invite_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer")
                        .HasColumnName("classroom_id");

                    b.Property<bool>("IsInvitee")
                        .HasColumnType("boolean")
                        .HasColumnName("is_invitee");

                    b.Property<bool>("IsInviter")
                        .HasColumnType("boolean")
                        .HasColumnName("is_inviter");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.HasKey("InviteId", "UserId", "ClassroomId")
                        .HasName("pk_classroom_invites");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_classroom_invites_classroom_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_classroom_invites_user_id");

                    b.ToTable("classroom_invites", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.ClassroomUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer")
                        .HasColumnName("classroom_id");

                    b.Property<bool?>("IsCreator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_creator");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId", "ClassroomId")
                        .HasName("pk_classroom_users");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_classroom_users_classroom_id");

                    b.HasIndex("IsCreator")
                        .HasDatabaseName("ix_classroom_users_is_creator");

                    b.ToTable("classroom_users", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.DelLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DeletedForId")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_for_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_del_logs");

                    b.HasIndex("DeletedForId")
                        .HasDatabaseName("ix_del_logs_deleted_for_id");

                    b.ToTable("del_logs", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.DelLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_del_log_types");

                    b.ToTable("del_log_types", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassroomId")
                        .HasColumnType("integer")
                        .HasColumnName("classroom_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<int?>("DelLogId")
                        .HasColumnType("integer")
                        .HasColumnName("del_log_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.Property<string>("Topic")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("topic");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_discussions");

                    b.HasIndex("ClassroomId")
                        .HasDatabaseName("ix_discussions_classroom_id");

                    b.HasIndex("DelLogId")
                        .HasDatabaseName("ix_discussions_del_log_id");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_discussions_state_id");

                    b.HasIndex("CreatedById", "ClassroomId")
                        .HasDatabaseName("ix_discussions_created_by_id_classroom_id");

                    b.ToTable("discussions", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("blob_name");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("container_name");

                    b.Property<long>("ContentLength")
                        .HasMaxLength(8388608)
                        .HasColumnType("bigint")
                        .HasColumnName("content_length");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ETag")
                        .HasColumnType("text")
                        .HasColumnName("e_tag");

                    b.Property<WhitelistedFileExtension>("FileExtension")
                        .HasColumnType("whitelisted_file_extension")
                        .HasColumnName("file_extension");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("MD5")
                        .HasColumnType("text")
                        .HasColumnName("md5");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sas");

                    b.Property<string>("SignatureDecoded")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signature_decoded");

                    b.Property<string>("SignatureEncoded")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signature_encoded");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<FileUploadStatus>("UploadStatus")
                        .HasMaxLength(255)
                        .HasColumnType("file_upload_status")
                        .HasColumnName("upload_status");

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("UploadedById")
                        .HasDatabaseName("ix_files_uploaded_by_id");

                    b.HasIndex("BlobName", "ContainerName")
                        .IsUnique()
                        .HasDatabaseName("ix_files_blob_name_container_name");

                    b.ToTable("files", (string)null);

                    b.HasCheckConstraint("ck_container_name", "length(container_name) >= 3 AND length(container_name) <= 63");

                    b.HasCheckConstraint("ck_content_length", "content_length > 0");
                });

            modelBuilder.Entity("API.Data.Entities.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<short?>("MaxUses")
                        .HasColumnType("smallint")
                        .HasColumnName("max_uses");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<short>("Uses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("uses");

                    b.HasKey("Id")
                        .HasName("pk_invites");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_invites_code");

                    b.ToTable("invites", (string)null);

                    b.HasCheckConstraint("ck_max_uses", "max_uses >= 0 AND max_uses <= 100");

                    b.HasCheckConstraint("ck_uses", "uses >= 0");
                });

            modelBuilder.Entity("API.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasDefaultValue("")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<int?>("DelLogId")
                        .HasColumnType("integer")
                        .HasColumnName("del_log_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("integer")
                        .HasColumnName("discussion_id");

                    b.Property<bool>("IsEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_event");

                    b.Property<MessageEvent?>("MessageEvent")
                        .HasColumnType("message_event")
                        .HasColumnName("message_event");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_message_id");

                    b.Property<DateTime?>("PinnedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pinned_at");

                    b.Property<int?>("PinnedById")
                        .HasColumnType("integer")
                        .HasColumnName("pinned_by_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("DelLogId")
                        .HasDatabaseName("ix_messages_del_log_id");

                    b.HasIndex("DiscussionId")
                        .HasDatabaseName("ix_messages_discussion_id");

                    b.HasIndex("ParentMessageId")
                        .HasDatabaseName("ix_messages_parent_message_id");

                    b.HasIndex("PinnedById")
                        .HasDatabaseName("ix_messages_pinned_by_id");

                    b.HasIndex("CreatedById", "DiscussionId")
                        .HasDatabaseName("ix_messages_created_by_id_discussion_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.MessageFile", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("MessageId", "FileId")
                        .HasName("pk_message_files");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_message_files_file_id");

                    b.ToTable("message_files", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at")
                        .HasDefaultValueSql("now() + INTERVAL '7 DAYS'");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_states");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Bio")
                        .HasMaxLength(190)
                        .HasColumnType("character varying(190)")
                        .HasColumnName("bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<UserProfileColor>("ProfileColor")
                        .HasColumnType("user_profile_color")
                        .HasColumnName("profile_color");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_users_state_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.UserEmailChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("NewEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("new_email");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TokenEncoded")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_encoded");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_email_changes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_email_changes_user_id");

                    b.HasIndex("Token", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email_changes_token_user_id");

                    b.ToTable("user_email_changes", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.UserPasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TokenEncoded")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_encoded");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_password_resets");

                    b.HasIndex("Token")
                        .HasDatabaseName("ix_user_password_resets_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_password_resets_user_id");

                    b.HasIndex("Token", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_password_resets_token_user_id");

                    b.ToTable("user_password_resets", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_users_tokens");

                    b.ToTable("users_tokens", (string)null);
                });

            modelBuilder.Entity("API.Data.Entities.Classroom", b =>
                {
                    b.HasOne("API.Data.Entities.DelLog", "DelLog")
                        .WithMany("DeletedClassrooms")
                        .HasForeignKey("DelLogId")
                        .HasConstraintName("fk_classrooms_del_logs_del_log_id");

                    b.HasOne("API.Data.Entities.State", "State")
                        .WithMany("Classrooms")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classrooms_states_state_id");

                    b.Navigation("DelLog");

                    b.Navigation("State");
                });

            modelBuilder.Entity("API.Data.Entities.ClassroomInvite", b =>
                {
                    b.HasOne("API.Data.Entities.Classroom", "Classroom")
                        .WithMany("Invites")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_invites_classrooms_classroom_id");

                    b.HasOne("API.Data.Entities.Invite", "Invite")
                        .WithMany("Logs")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_invites_invites_invite_id");

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_invites_users_user_id");

                    b.Navigation("Classroom");

                    b.Navigation("Invite");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.ClassroomUser", b =>
                {
                    b.HasOne("API.Data.Entities.Classroom", "Classroom")
                        .WithMany("Users")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_users_classrooms_classroom_id");

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Classrooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classroom_users_users_user_id");

                    b.Navigation("Classroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.DelLog", b =>
                {
                    b.HasOne("API.Data.Entities.DelLogType", "DeletedFor")
                        .WithMany("DelLogs")
                        .HasForeignKey("DeletedForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_del_logs_del_log_types_deleted_for_id");

                    b.Navigation("DeletedFor");
                });

            modelBuilder.Entity("API.Data.Entities.Discussion", b =>
                {
                    b.HasOne("API.Data.Entities.Classroom", "Classroom")
                        .WithMany("Discussions")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_classrooms_classroom_id");

                    b.HasOne("API.Data.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_users_created_by_id");

                    b.HasOne("API.Data.Entities.DelLog", "DelLog")
                        .WithMany("DeletedDiscussions")
                        .HasForeignKey("DelLogId")
                        .HasConstraintName("fk_discussions_del_logs_del_log_id");

                    b.HasOne("API.Data.Entities.State", "State")
                        .WithMany("Discussions")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_states_state_id");

                    b.Navigation("Classroom");

                    b.Navigation("CreatedBy");

                    b.Navigation("DelLog");

                    b.Navigation("State");
                });

            modelBuilder.Entity("API.Data.Entities.File", b =>
                {
                    b.HasOne("API.Data.Entities.User", "UploadedBy")
                        .WithMany("FileUploads")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_files_users_uploaded_by_id");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("API.Data.Entities.Message", b =>
                {
                    b.HasOne("API.Data.Entities.User", "CreatedBy")
                        .WithMany("Messages")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_created_by_id");

                    b.HasOne("API.Data.Entities.DelLog", "DelLog")
                        .WithMany("DeletedMessages")
                        .HasForeignKey("DelLogId")
                        .HasConstraintName("fk_messages_del_logs_del_log_id");

                    b.HasOne("API.Data.Entities.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_discussions_discussion_id");

                    b.HasOne("API.Data.Entities.Message", "ParentMessage")
                        .WithMany("MessageLinks")
                        .HasForeignKey("ParentMessageId")
                        .HasConstraintName("fk_messages_messages_parent_message_id");

                    b.HasOne("API.Data.Entities.User", "PinnedBy")
                        .WithMany("PinnedMessages")
                        .HasForeignKey("PinnedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_messages_users_pinned_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DelLog");

                    b.Navigation("Discussion");

                    b.Navigation("ParentMessage");

                    b.Navigation("PinnedBy");
                });

            modelBuilder.Entity("API.Data.Entities.MessageFile", b =>
                {
                    b.HasOne("API.Data.Entities.File", "File")
                        .WithMany("MessageFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_files_files_file_id");

                    b.HasOne("API.Data.Entities.Message", "Message")
                        .WithMany("MessageFiles")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_files_messages_message_id");

                    b.Navigation("File");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("API.Data.Entities.Session", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.HasOne("API.Data.Entities.State", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_states_state_id");

                    b.Navigation("State");
                });

            modelBuilder.Entity("API.Data.Entities.UserEmailChange", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("EmailChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_email_changes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.UserPasswordReset", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_password_resets_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_roles_role_id");

                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_tokens_users_user_id");
                });

            modelBuilder.Entity("API.Data.Entities.Classroom", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Invites");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Entities.DelLog", b =>
                {
                    b.Navigation("DeletedClassrooms");

                    b.Navigation("DeletedDiscussions");

                    b.Navigation("DeletedMessages");
                });

            modelBuilder.Entity("API.Data.Entities.DelLogType", b =>
                {
                    b.Navigation("DelLogs");
                });

            modelBuilder.Entity("API.Data.Entities.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("API.Data.Entities.File", b =>
                {
                    b.Navigation("MessageFiles");
                });

            modelBuilder.Entity("API.Data.Entities.Invite", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("API.Data.Entities.Message", b =>
                {
                    b.Navigation("MessageFiles");

                    b.Navigation("MessageLinks");
                });

            modelBuilder.Entity("API.Data.Entities.State", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("Discussions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("EmailChanges");

                    b.Navigation("FileUploads");

                    b.Navigation("Invites");

                    b.Navigation("Messages");

                    b.Navigation("PasswordResets");

                    b.Navigation("PinnedMessages");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
